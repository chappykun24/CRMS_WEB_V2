[33mcommit eaefe7174fdc983552e4cc3cd6cb728fc219b880[m
Author: chappykun24 <22-36765@g.batstate-u.edu.ph>
Date:   Sun Sep 7 11:16:33 2025 +0800

    before changing the backend to render

[1mdiff --git a/server.js b/server.js[m
[1mindex 59c5f3d..cb92ccf 100644[m
[1m--- a/server.js[m
[1m+++ b/server.js[m
[36m@@ -1918,119 +1918,6 @@[m [mapp.get('/api/section-courses/assigned', async (req, res) => {[m
   }[m
 });[m
 [m
[31m-// =========================[m
[31m-// Attendance: sessions + records[m
[31m-// =========================[m
[31m-[m
[31m-// Get an attendance session and its records for a section_course and date[m
[31m-app.get('/api/attendance/sessions', async (req, res) => {[m
[31m-  try {[m
[31m-    const { section_course_id, date } = req.query || {};[m
[31m-    if (!section_course_id || !date) {[m
[31m-      return res.status(400).json({ error: 'section_course_id and date are required' });[m
[31m-    }[m
[31m-[m
[31m-    // Ensure session exists[m
[31m-    const sessionRes = await pool.query([m
[31m-      `SELECT session_id, section_course_id, session_date, start_time, end_time[m
[31m-       FROM attendance_sessions[m
[31m-       WHERE section_course_id = $1 AND session_date = $2`,[m
[31m-      [section_course_id, date][m
[31m-    );[m
[31m-[m
[31m-    let session = sessionRes.rows[0] || null;[m
[31m-[m
[31m-    // Load records if session exists[m
[31m-    let records = [];[m
[31m-    if (session) {[m
[31m-      const recRes = await pool.query([m
[31m-        `SELECT record_id, session_id, student_id, status, time_in, time_out, remarks[m
[31m-         FROM attendance_records[m
[31m-         WHERE session_id = $1[m
[31m-         ORDER BY student_id`,[m
[31m-        [session.session_id][m
[31m-      );[m
[31m-      records = recRes.rows;[m
[31m-    }[m
[31m-[m
[31m-    return res.json({ session, records });[m
[31m-  } catch (error) {[m
[31m-    console.error('❌ [ATTENDANCE] GET session error:', error);[m
[31m-    res.status(500).json({ error: error.message });[m
[31m-  }[m
[31m-});[m
[31m-[m
[31m-// Create (or get) an attendance session for a section_course and date[m
[31m-app.post('/api/attendance/sessions', async (req, res) => {[m
[31m-  try {[m
[31m-    const { section_course_id, date, start_time = null, end_time = null, created_by = null } = req.body || {};[m
[31m-    if (!section_course_id || !date) {[m
[31m-      return res.status(400).json({ error: 'section_course_id and date are required' });[m
[31m-    }[m
[31m-[m
[31m-    // Check if session already exists[m
[31m-    const exists = await pool.query([m
[31m-      `SELECT session_id FROM attendance_sessions WHERE section_course_id = $1 AND session_date = $2`,[m
[31m-      [section_course_id, date][m
[31m-    );[m
[31m-    if (exists.rowCount > 0) {[m
[31m-      return res.json({ session_id: exists.rows[0].session_id, created: false });[m
[31m-    }[m
[31m-[m
[31m-    // Create new session[m
[31m-    const insert = await pool.query([m
[31m-      `INSERT INTO attendance_sessions (section_course_id, session_date, start_time, end_time, created_by)[m
[31m-       VALUES ($1, $2, $3, $4, $5)[m
[31m-       RETURNING session_id`,[m
[31m-      [section_course_id, date, start_time, end_time, created_by][m
[31m-    );[m
[31m-    return res.status(201).json({ session_id: insert.rows[0].session_id, created: true });[m
[31m-  } catch (error) {[m
[31m-    console.error('❌ [ATTENDANCE] Create session error:', error);[m
[31m-    res.status(500).json({ error: error.message });[m
[31m-  }[m
[31m-});[m
[31m-[m
[31m-// Upsert multiple attendance records for a session[m
[31m-app.post('/api/attendance/records/bulk', async (req, res) => {[m
[31m-  const client = await pool.connect();[m
[31m-  try {[m
[31m-    const { session_id, records } = req.body || {};[m
[31m-    if (!session_id || !Array.isArray(records)) {[m
[31m-      return res.status(400).json({ error: 'session_id and records[] are required' });[m
[31m-    }[m
[31m-[m
[31m-    await client.query('BEGIN');[m
[31m-[m
[31m-    // For idempotency: delete existing records for the provided students, then insert fresh[m
[31m-    const studentIds = records.map(r => r.student_id).filter(Boolean);[m
[31m-    if (studentIds.length > 0) {[m
[31m-      await client.query([m
[31m-        `DELETE FROM attendance_records WHERE session_id = $1 AND student_id = ANY($2::int[])`,[m
[31m-        [session_id, studentIds][m
[31m-      );[m
[31m-    }[m
[31m-[m
[31m-    for (const r of records) {[m
[31m-      const status = r.status && ['present','absent','late','excused'].includes(r.status) ? r.status : 'present';[m
[31m-      await client.query([m
[31m-        `INSERT INTO attendance_records (session_id, student_id, status, time_in, time_out, remarks)[m
[31m-         VALUES ($1, $2, $3, $4, $5, $6)`,[m
[31m-        [session_id, r.student_id, status, r.time_in || null, r.time_out || null, r.remarks || null][m
[31m-      );[m
[31m-    }[m
[31m-[m
[31m-    await client.query('COMMIT');[m
[31m-    return res.json({ success: true, count: records.length });[m
[31m-  } catch (error) {[m
[31m-    await client.query('ROLLBACK');[m
[31m-    console.error('❌ [ATTENDANCE] Bulk upsert error:', error);[m
[31m-    res.status(500).json({ error: error.message });[m
[31m-  } finally {[m
[31m-    client.release();[m
[31m-  }[m
[31m-});[m
[31m-[m
 // Create new section course[m
 app.post('/api/section-courses', async (req, res) => {[m
   try {[m
[1mdiff --git a/src/pages/faculty/MyClasses.jsx b/src/pages/faculty/MyClasses.jsx[m
[1mindex de93bc6..37cee9e 100644[m
[1m--- a/src/pages/faculty/MyClasses.jsx[m
[1m+++ b/src/pages/faculty/MyClasses.jsx[m
[36m@@ -47,7 +47,40 @@[m [mconst MyClasses = () => {[m
   const [attendanceRecords, setAttendanceRecords] = useState({}) // {studentId: {date: status}}[m
   const [togglingAttendance, setTogglingAttendance] = useState(false)[m
   const [submittingAttendance, setSubmittingAttendance] = useState(false)[m
[31m-  const [attendanceSessionId, setAttendanceSessionId] = useState(null)[m
[32m+[m
[32m+[m[32m  // Session details state[m
[32m+[m[32m  const [sessionDetails, setSessionDetails] = useState({[m
[32m+[m[32m    sessionNumber: '',[m
[32m+[m[32m    topic: '',[m
[32m+[m[32m    description: '',[m
[32m+[m[32m    startTime: '',[m
[32m+[m[32m    endTime: ''[m
[32m+[m[32m  })[m
[32m+[m[32m  const [sessionDetailsValid, setSessionDetailsValid] = useState(false)[m
[32m+[m
[32m+[m[32m  // Validate session details[m
[32m+[m[32m  const validateSessionDetails = useCallback(() => {[m
[32m+[m[32m    const { sessionNumber, topic, startTime, endTime } = sessionDetails[m
[32m+[m[32m    const isValid = sessionNumber.trim() !== '' &&[m[41m [m
[32m+[m[32m                   topic.trim() !== '' &&[m[41m [m
[32m+[m[32m                   startTime !== '' &&[m[41m [m
[32m+[m[32m                   endTime !== ''[m
[32m+[m[32m    setSessionDetailsValid(isValid)[m
[32m+[m[32m    return isValid[m
[32m+[m[32m  }, [sessionDetails])[m
[32m+[m
[32m+[m[32m  // Update session details and validate[m
[32m+[m[32m  const updateSessionDetails = useCallback((field, value) => {[m
[32m+[m[32m    setSessionDetails(prev => {[m
[32m+[m[32m      const updated = { ...prev, [field]: value }[m
[32m+[m[32m      return updated[m
[32m+[m[32m    })[m
[32m+[m[32m  }, [])[m
[32m+[m
[32m+[m[32m  // Validate session details when they change[m
[32m+[m[32m  useEffect(() => {[m
[32m+[m[32m    validateSessionDetails()[m
[32m+[m[32m  }, [sessionDetails, validateSessionDetails])[m
 [m
   // Helpers: extract surname (last word) for alphabetical sorting[m
   const extractSurname = (fullName) => {[m
[36m@@ -82,68 +115,38 @@[m [mconst MyClasses = () => {[m
     return attendanceRecords[studentId]?.[attendanceDate]?.remarks || ''[m
   }, [attendanceRecords, attendanceDate])[m
 [m
[31m-  // Ensure session exis